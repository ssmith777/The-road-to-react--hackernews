{"version":3,"sources":["Buttons/index.js","constants/index.js","Table/index.js","Search/index.js","App/index.js","serviceWorker.js","index.js"],"names":["Button","_ref","onClick","_ref$className","className","children","react_default","a","createElement","type","defaultProps","prototype","PropTypes","func","isRequired","string","node","library","add","faSpinner","Component","DEFAULT_QUERY","largeColumn","width","midColumn","smallColumn","Loading","react_fontawesome_index_es","size","icon","ButtonWithLoading","isLoading","rest","Object","objectWithoutProperties","constants_Loading","SORTS","NONE","list","TITLE","sortBy","AUTHOR","COMMENTS","reverse","POINTS","Sort","_ref2","sortKey","activeSortKey","onSort","sortClass","classNames","button-active","src_Buttons","Table","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isSortReverse","bind","assertThisInitialized","setState","_this$props","onDismiss","_this$state","sortedList","reverseSortedList","style","constants_Sort","map","item","key","objectID","href","url","title","author","num_comments","points","Search","input","focus","value","onChange","onSubmit","ref","el","App","_isMounted","results","searchKey","searchTerm","error","setSearchTopStories","fetchSearchTopStories","onSearchSubmit","onSearchChange","needsToSearchTopStories","_this2","page","arguments","length","undefined","axios","concat","then","result","data","catch","hits","prevState","oldHits","updatedHits","toConsumableArray","objectSpread","defineProperty","updateSearchTopStoriesState","event","preventDefault","target","id","_results$searchKey","filter","_this3","_this$state2","src_Search_0","src_Table_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2581a2e3.chunk.js","sourcesContent":["import React from 'react';\nimport './index.css';\nimport PropTypes from 'prop-types';\n\nconst Button = ({ onClick,className = '',children }) => (\n  <button\n    onClick={onClick}\n    className={className}\n    type=\"button\">{children}\n  </button>\n)\n\nButton.defaultProps = {\n  className: '',\n}\n\nButton.prototype = {\n  onClick: PropTypes.func.isRequired,\n  className: PropTypes.string,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Button;","import React from 'react'\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport { sortBy } from 'lodash';\nimport classNames from 'classnames';\nimport Button from '../Buttons/index';\n\n\nlibrary.add(faSpinner)\n//faSpinner.icon(\"50px\")\nexport const DEFAULT_QUERY = 'React';\nexport const PATH_BASE = 'https://hn.algolia.com/api/v1';\nexport const PATH_SEARCH = '/search';\nexport const PARAM_SEARCH = 'query=';\nexport const PARAM_PAGE = 'page=';\nexport const PARAM_HPP = 'hitsPerPage=';\nexport const DEFAULT_HPP = '10';\n\nexport const largeColumn = {\n  width: '40%',\n}\n\nexport const midColumn = {\nwidth: '30%',\n}\n\nexport const smallColumn = {\nwidth: '10%'\n}\n\n\n\nexport const Loading = () => (\n    <div>\n      loading... <FontAwesomeIcon size=\"2x\" icon=\"spinner\" />\n    </div>\n  )\n\n// High order component\nexport const withLoading = (Component) => ({ isLoading, ...rest }) =>\nisLoading\n  ? <Loading/>\n  : <Component {...rest} />\n\nexport const ButtonWithLoading = withLoading(Button);\n\n\n// Search constants for loDash\nexport const SORTS = {\n  NONE: list => list,\n  TITLE: list => sortBy(list, 'title'),\n  AUTHOR: list => sortBy(list, 'author'),\n  COMMENTS: list => sortBy(list, 'num_comments').reverse(),\n  POINTS: list => sortBy(list, 'points').reverse(),\n};\n\n//Search\n\nexport const Sort =({\n  sortKey,\n  activeSortKey,\n  onSort,\n  children \n  }) => {\n  \n  const sortClass = classNames( 'button-inline', {'button-active': sortKey === activeSortKey});\n\n  return (\n  <Button\n    onClick={() => onSort(sortKey)}\n    className={sortClass}\n  >\n    {children}\n  </Button>\n  );\n}\n","import React, {Component} from 'react';\nimport Button from '../Buttons/index';\nimport './index.css';\nimport PropTypes from 'prop-types';\nimport {Sort, SORTS, smallColumn, midColumn, largeColumn} from '../constants'\n//import { sortBy } from 'lodash';\n\n\n\n\n// functional stateless component\nclass Table extends Component { \n    constructor(props){\n        super(props);\n        this.state ={\n            sortKey: 'NONE',\n            isSortReverse: false,\n        };\n        this.onSort = this.onSort.bind(this);\n\n        //this.onSort = this.onSort.bind(this);\n    }\n    // sort class method to set local component state\n    onSort(sortKey) {\n        const isSortReverse = this.state.sortKey === sortKey && !this.state.isSortReverse;\n        this.setState({sortKey,isSortReverse});\n    }\n\n    render() {\n    const {\n    list,\n    onDismiss \n    } = this.props;\n\n    const {\n        sortKey,\n        isSortReverse,\n    } = this.state;\n\n    const sortedList = SORTS[sortKey](list);\n    const reverseSortedList = isSortReverse\n        ? sortedList.reverse()\n        : sortedList;\n    return (\n        <div className=\"table\">\n            <div className=\"table-header\">\n                <span style={largeColumn}>\n                    <Sort \n                        sortKey={'TITLE'}\n                        onSort={this.onSort}\n                        activeSortKey={sortKey}\n                    >\n                    Title\n                    </Sort>\n                </span>\n                <span style={midColumn}>\n                    <Sort \n                        sortKey={'AUTHOR'}\n                        onSort={this.onSort}\n                        activeSortKey={sortKey}\n                    >\n                    Author\n                    </Sort>\n                </span>\n                <span style={smallColumn}>\n                    <Sort \n                        sortKey={'COMMENTS'}\n                        onSort={this.onSort}\n                        activeSortKey={sortKey}\n                    >\n                    Comments\n                    </Sort>\n                </span>\n                <span style={smallColumn}>\n                    <Sort \n                        sortKey={'POINTS'}\n                        onSort={this.onSort}\n                        activeSortKey={sortKey}\n                    >\n                    Points\n                    </Sort>\n                </span>\n                <span style={smallColumn}>\n                    Archive\n                </span>\n            </div>\n            {reverseSortedList.map(item =>\n            <div key={item.objectID} className=\"table-row\">\n                <span style={{width: '40%' }}>\n                <a href={item.url}>{item.title}</a>\n                </span>\n                <span style={largeColumn}>{item.author}</span>\n                <span style={midColumn}>{item.num_comments}</span>\n                <span style={smallColumn}>{item.points}</span>\n                <span style={smallColumn}>\n                <Button\n                    onClick={() => onDismiss(item.objectID)} className=\"button-inline\">\n                    Dismiss\n                </Button>\n                </span>\n            </div>\n            )}\n        </div>\n        );\n    }\n}\n\n// Table.prototype = {\n//     list: PropTypes.arrayOf(\n//         PropTypes.shape({\n//             objectID: PropTypes.string.isRequired,\n//             author: PropTypes.string,\n//             url: PropTypes.string,\n//             num_comments: PropTypes.number,\n//             points: PropTypes.number,\n//         })\n//     ).isRequired,\n//     onDismiss: PropTypes.func.isRequired,\n// };\n\nexport default Table;","import React, { Component } from 'react';\nimport './index.css';\n//import PropTypes from 'prop-types';\n\n// ES6 class component\nclass Search extends Component {\n  componentDidMount() {\n    if (this.input){\n      this.input.focus();       \n    }\n  }\n  render() {\n    const {\n      value,\n      onChange,\n      onSubmit,\n      children \n    } = this.props;\n\n    return (\n      <form onSubmit={onSubmit}>\n        <input\n          type=\"text\"\n          value={value}\n          onChange={onChange}\n          ref={el => this.input =el}\n          />\n          <button type=\"submit\">\n            {children}\n          </button>\n      </form>\n      );\n  }\n}\n\n\nexport default Search;\n\n// functional stateless component \n// Example: with ref example\n// note: no lifecycle method so we can not trigger the focus\n//------------------------------------\n// const Search = ({\n//     value,\n//     onChange,\n//     onSubmit,\n//     children \n//   }) => {\n//   let input;\n//   return (\n//     <form onSubmit={onSubmit}>\n//       <input\n//         type=\"text\"\n//         value={value}\n//         onChange={onChange}\n//         ref={el => input = el}\n//         />\n//         <button type=\"submit\">\n//           {children}\n//         </button>\n//     </form>\n//   );\n// }\n\n\n// used for Proptypes but commited out because we changed to a class to focus on input field \n// Search.prototype = {\n//   value: PropTypes.string.isRequired,\n//   onChange: PropTypes.func.isRequired,\n//   onSubmit: PropTypes.func.isRequired,\n//   children: PropTypes.node.isRequired,\n// };\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport './index.css';\n//import { sortBy } from 'lodash'\n \n// import our stateless components\nimport Button from '../Buttons/index';\nimport Table from '../Table/index';\nimport Search from '../Search/index';\n\n// default constants\nimport { \n  DEFAULT_QUERY,\n  DEFAULT_HPP,\n  PATH_BASE,\n  PATH_SEARCH,\n  PARAM_SEARCH,\n  PARAM_PAGE,\n  PARAM_HPP,\n  ButtonWithLoading,\n } from '../constants';\n\n\nconst updateSearchTopStoriesState = (hits, page) => (prevState) => {\n  const { searchKey, results} = prevState;\n\n  const oldHits = results && results[searchKey]\n    ? results[searchKey].hits\n    : [];\n\n  const updatedHits = [\n    ...oldHits,\n    ...hits\n  ];\n  return {\n    results: {\n      ...results,[searchKey]:{ hits: updatedHits, page }\n    },\n    isLoading: false\n  };\n}\n\n  \nclass App extends Component {\n  _isMounted = false;\n\n  constructor(props){\n    super(props);\n\n    this.state = {\n      results: null,  \n      searchKey: '',\n      searchTerm: DEFAULT_QUERY,\n      error: null,\n      isLoading: false,\n    };\n\n    this.setSearchTopStories = this.setSearchTopStories.bind(this);\n    this.fetchSearchTopStories = this.fetchSearchTopStories.bind(this);\n    this.onDismiss = this.onDismiss.bind(this);\n    this.onSearchSubmit = this.onSearchSubmit.bind(this);\n    this.onSearchChange = this.onSearchChange.bind(this);\n    this.needsToSearchTopStories = this.needsToSearchTopStories.bind(this);\n\n  } \n  \n\n  // axios fetch\n  fetchSearchTopStories(searchTerm, page = 0) {\n    this.setState({ isLoading: true});\n\n    axios(`${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${searchTerm}&${PARAM_PAGE}${page}&${PARAM_HPP}${DEFAULT_HPP}`)\n      .then(result => this._isMounted && this.setSearchTopStories(result.data))\n      .catch(error => this._isMounted && this.setState({ error }));\n  }\n\n  needsToSearchTopStories(searchTerm) {\n    return !this.state.results[searchTerm];\n  }\n\n  setSearchTopStories(result) {\n    const { hits, page } = result;\n    this.setState(updateSearchTopStoriesState(hits,page));\n  }\n\n \n  componentDidMount() {\n    this._isMounted = true;\n    const { searchTerm } = this.state;\n    this.setState({searchKey: searchTerm});\n    this.fetchSearchTopStories(searchTerm);\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  onSearchSubmit(event) {\n    const { searchTerm } = this.state;\n    this.setState({searchKey: searchTerm});\n   \n    if (this.needsToSearchTopStories(searchTerm)) {\n      this.fetchSearchTopStories(searchTerm);\n    }\n    event.preventDefault();\n  }\n\n  onSearchChange(event) {\n    this.setState({searchTerm: event.target.value})\n  }\n  \n  onDismiss(id) {\n\n    const { searchKey, results } = this.state; \n\n    const { hits, page } = results[searchKey];\n\n    const isNotId = item => item.objectID !== id;\n  \n    const updatedHits = hits.filter(isNotId);\n    \n    this.setState({\n      results: {\n         ...results,\n         [searchKey]:  {hits: updatedHits, page }\n      }\n    });\n\n  }\n  \n  render() {\n    \n    const { \n      searchTerm,\n      results,\n      searchKey,\n      error,\n      isLoading\n      } = this.state;\n\n    const page = (\n      results &&\n      results[searchKey] &&\n      results[searchKey].page\n      ) || 0;\n\n    const list = (\n      results &&\n      results[searchKey] &&\n      results[searchKey].hits\n      ) || [];\n\n    return (\n      <div className=\"page\">\n        <div className=\"interactions\">\n          <Search \n            value={searchTerm} \n            onChange={this.onSearchChange}\n            onSubmit={this.onSearchSubmit}\n          >\n            Search\n          </Search>\n        </div>\n        { error\n          ? <div className=\"interactions\">\n              <p>Something went wrong.</p>\n            </div>\n          : <Table \n              list={list} \n              onDismiss={this.onDismiss} \n            />\n        }\n        <div className=\"interactions\"> \n          <ButtonWithLoading\n            isLoading = {isLoading}\n            onClick={() => this.fetchSearchTopStories(searchKey, page +1)}\n            >\n             More\n          </ButtonWithLoading>   \n        </div>\n      </div>\n    );\n  }\n}\n\n\n\n// added for jest testing\nexport {\n  Button,\n  Search,\n  Table,\n};\n\nexport default App; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/index';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}